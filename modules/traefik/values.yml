deployment:
  enabled: true
  kind: Deployment
  replicas: 1

ingressRoute:
  dashboard:
    enabled: true
    annotations: {}
    labels: {}
    entryPoints: ["web", "websecure"]
    matchRule: Host(`traefik.eresseel.org`) && PathPrefix(`/dashboard`) || Host(`traefik.eresseel.org`) && PathPrefix(`/api`)
    services:
      - name: api@internal
        kind: TraefikService
    middlewares:
      - name: secured
    tls: {}
  healthcheck:
    enabled: true
    annotations: {}
    labels: {}
    entryPoints: ["traefik"]
    matchRule: Host(`traefik.eresseel.org`) && PathPrefix(`/ping`)
    services:
      - name: ping@internal
        kind: TraefikService
    tls: {}

# https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/
extraObjects:
  - apiVersion: traefik.io/v1alpha1
    kind: TLSStore
    metadata:
      name: wildcard-cert
      namespace: traefik
    spec:
      defaultCertificate:
        secretName: wildcard-cert-secret2

  - apiVersion: v1
    kind: Secret
    metadata:
      name: common-auth-secret
      namespace: traefik
    type: kubernetes.io/basic-auth
    data:
      username: dXNlcg== # username: user
      password: cGFzc3dvcmQ= # password: password
  - apiVersion: traefik.io/v1alpha1

    kind: Middleware
    metadata:
      name: secured
      namespace: traefik
    spec:
      chain:
        middlewares:
        - name: common-auth
        - name: https-only
  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: common-auth
      namespace: traefik
    spec:
      basicAuth:
        removeHeader: true
        secret: common-auth-secret
  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: https-only
      namespace: traefik
    spec:
      redirectScheme:
        scheme: https
        permanent: true

  - apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      name: traefik-metrics
      namespace: traefik
    spec:
      entryPoints:
        - web
        - websecure
      routes:
        - match: Host(`traefik.eresseel.org`) && PathPrefix(`/metrics`)
          kind: Rule
          strategy: RoundRobin
          scheme: https
          observability:
            accesslogs: true
            metrics: true
            tracing: true
          middlewares:
            - name: secured
          services:
            - name: prometheus@internal
              kind: TraefikService
              port: 9100

  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: https-only
      namespace: monitoring
    spec:
      redirectScheme:
        scheme: https
        permanent: true
  - apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      name: prometheus
      namespace: monitoring
    spec:
      entryPoints:
        - web
        - websecure
      routes:
        - match: Host(`prometheus.eresseel.org`) && PathPrefix(`/`) || Host(`prometheus.eresseel.org`) && PathPrefix(`/api`)
          kind: Rule
          strategy: RoundRobin
          scheme: https
          observability:
            accesslogs: true
            metrics: true
            tracing: true
          middlewares:
            - name: https-only
          services:
            - name: prometheus-server
              kind: Service
              port: 80
  - apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      name: alertmanager
      namespace: monitoring
    spec:
      entryPoints:
        - web
        - websecure
      routes:
        - match: Host(`alertmanager.eresseel.org`) && PathPrefix(`/`)
          kind: Rule
          strategy: RoundRobin
          scheme: https
          observability:
            accesslogs: true
            metrics: true
            tracing: true
          middlewares:
            - name: https-only
          services:
            - name: prometheus-alertmanager
              kind: Service
              port: 9093
  - apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      name: grafana
      namespace: monitoring
    spec:
      entryPoints:
        - web
        - websecure
      routes:
        - match: Host(`grafana.eresseel.org`) && PathPrefix(`/`)
          kind: Rule
          strategy: RoundRobin
          scheme: https
          observability:
            accesslogs: true
            metrics: true
            tracing: true
          middlewares:
            - name: https-only
          services:
            - name: grafana
              kind: Service
              port: 80

  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: https-only
      namespace: portainer
    spec:
      redirectScheme:
        scheme: https
        permanent: true
  - apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      name: portainer
      namespace: portainer
    spec:
      entryPoints:
        - web
        - websecure
      routes:
        - match: Host(`portainer.eresseel.org`) && PathPrefix(`/`) || Host(`portainer.eresseel.org`) && PathPrefix(`/api`)
          kind: Rule
          strategy: RoundRobin
          scheme: https
          observability:
            accesslogs: true
            metrics: true
            tracing: true
          middlewares:
            - name: https-only
          services:
            - name: portainer
              kind: Service
              port: 9000

  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: https-only
      namespace: ci-cd
    spec:
      redirectScheme:
        scheme: https
        permanent: true
  - apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      name: gitlab
      namespace: ci-cd
    spec:
      entryPoints:
        - web
        - websecure
      routes:
        - match: Host(`gitlab.eresseel.org`) && PathPrefix(`/`) || Host(`gitlab.eresseel.org`) && PathPrefix(`/users/sign_in`)
          kind: Rule
          strategy: RoundRobin
          scheme: https
          observability:
            accesslogs: true
            metrics: true
            tracing: true
          middlewares:
            - name: https-only
          services:
            - name: gitlab-webservice-default
              kind: Service
              port: 8080

  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: https-only
      namespace: rook-ceph
    spec:
      redirectScheme:
        scheme: https
        permanent: true
  - apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      name: ceph
      namespace: rook-ceph
    spec:
      entryPoints:
        - web
        - websecure
      routes:
        - match: Host(`rook-ceph.eresseel.org`) && PathPrefix(`/`)
          kind: Rule
          strategy: RoundRobin
          scheme: http
          observability:
            accesslogs: true
            metrics: true
            tracing: true
          middlewares:
            - name: https-only
          services:
            - name: rook-ceph-mgr-dashboard
              kind: Service
              port: 8080

  - apiVersion: traefik.io/v1alpha1
    kind: Middleware
    metadata:
      name: https-only
      namespace: tracing
    spec:
      redirectScheme:
        scheme: https
        permanent: true
  - apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      name: jaeger-ui
      namespace: tracing
    spec:
      entryPoints:
        - web
        - websecure
      routes:
        - match: Host(`jaeger.eresseel.org`) && PathPrefix(`/`)
          kind: Rule
          strategy: RoundRobin
          scheme: https
          observability:
            accesslogs: true
            metrics: true
            tracing: true
          middlewares:
            - name: https-only
          services:
            - name: jaeger-query
              kind: Service
              port: 80

ingressClass:
  enabled: true
  isDefaultClass: true

experimental:
  abortOnPluginFailure: false
  fastProxy:
    enabled: true
    debug: false
  kubernetesGateway:
    enabled: true
  plugins: {}
  # demo:
  #   moduleName: github.com/traefik/plugindemo
  #   version: v0.2.1

service:
  enabled: true
  type: LoadBalancer
  spec:
    externalTrafficPolicy: Cluster

autoscaling:
  enabled: false

metrics:
  addInternals: true
  prometheus:
    entryPoint: metrics
    addEntryPointsLabels:
    addRoutersLabels:
    addServicesLabels:
    buckets: ""
    manualRouting: false

logs:
  general:
    format: "common" # @schema enum:["common", "json", null]; type:[string, null]; default: "common"
    level: "INFO"  # @schema enum:[TRACE,DEBUG,INFO,WARN,ERROR,FATAL,PANIC]; default: "INFO"
    filePath: ""
    noColor: false
  access:
    enabled: true

persistence:
  enabled: false
  name: data
  existingClaim: ""
  accessMode: ReadWriteOnce
  size: 128Mi
  storageClass: ""
  volumeName: ""
  path: /data
  annotations: {}
  subPath: ""

tracing:
  addInternals: true
  serviceName: "traefik"
  capturedRequestHeaders:
    - "User-Agent"
    - "X-Request-Id"
  capturedResponseHeaders:
    - "X-Trace-Id"
  safeQueryParams:
    - "userId"
  sampleRate: 1.0
  otlp:
    enabled: true
    http:
      enabled: true
      endpoint: "http://jaeger-collector.tracing.svc.cluster.local:4318/v1/traces"
    grpc:
      enabled: false

additionalArguments: []

resources:
  limits:
    cpu: 100m
    memory: 100Mi
  requests:
    cpu: 100m
    memory: 100Mi

tolerations:
  - key: "node-role.kubernetes.io/master"
    operator: "Equal"
    value: "true"
